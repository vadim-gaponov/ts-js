// ==UserScript==
// @name         GPT-clip
// @namespace    https://chat.openai.com/
// @version      0.4.2
// @description  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è share-—Å—Å—ã–ª–∫–∏ + Markdown-–∑–∞–º–µ—Ç–∫–∞ –≤ Obsidian —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —Å—Å—ã–ª–∫–∏ üìÑüîóüì•
// @source       https://raw.githubusercontent.com/vadim-gaponov/ts-js/main/obsidian/GPT-clip.js
// @downloadURL  https://raw.githubusercontent.com/vadim-gaponov/ts-js/main/obsidian/GPT-clip.js
// @updateURL    https://raw.githubusercontent.com/vadim-gaponov/ts-js/main/obsidian/GPT-clip.js
// @author       Sol
// @match        https://chat.openai.com/*
// @match        https://chatgpt.com/*
// @grant        GM_setClipboard
// @grant        GM_notification
// ==/UserScript==

(function () {
    'use strict';

    const vault = "ChatGPT";
    const folder = "3.GPT-Clip";

    let isProcessing = false;

    function log(msg) {
        console.log(`[GPT‚ÜíObsidian]: ${msg}`);
    }

    function nowStr() {
        const d = new Date();
        return d.toISOString().slice(0, 10);
    }

    function waitForShareLink(cb) {
        log("‚è≥ –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è share-—Å—Å—ã–ª–∫–∏‚Ä¶");

        const interval = setInterval(() => {
            const el = [...document.querySelectorAll("input[readonly], textarea, div")]
                .find(e => {
                    const val = (e.value || e.innerText || "").trim();
                    return val.startsWith("https://chatgpt.com/share/");
                });

            if (el) {
                clearInterval(interval);
                const link = (el.value || el.innerText).trim();
                log("‚úÖ Share-—Å—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: " + link);
                cb(link);
            }
        }, 500);
    }

    function clickShare(cb) {
        const btn = [...document.querySelectorAll("button")].find(el => el.textContent.includes("Share"));
        if (!btn) {
            log("‚ùå –ö–Ω–æ–ø–∫–∞ Share –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            alert("–ö–Ω–æ–ø–∫–∞ Share –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –≤ —á–∞—Ç–µ.");
            return;
        }
        log("üîò –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Share");
        btn.click();
        waitForShareLink(cb);
    }

    function makeObsidianNote(title, link) {
        const md = `# ${title}\n\n[üß† GPT-—Å–µ—Å—Å–∏—è](${link})\n\n–¢–µ–º—ã: `;
        const url = `obsidian://new?vault=${encodeURIComponent(vault)}&name=${encodeURIComponent(folder + "/" + title)}&content=${encodeURIComponent(md)}`;

        log("üìã –ö–æ–ø–∏—Ä—É–µ–º Markdown –≤ –±—É—Ñ–µ—Ä");
        GM_setClipboard(md);
        GM_notification({ title: "ChatGPT", text: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Obsidian", timeout: 3000 });

        log("üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º Obsidian: " + url);
        window.open(url);

        isProcessing = false;
    }

    function insertButton() {
        let target = document.querySelector("div.sticky.top-0") || document.body;
        if (document.getElementById("gpt-md-clip")) return;

        const btn = document.createElement("button");
        btn.id = "gpt-md-clip";
        btn.textContent = "üìÑ Share ‚Üí Obsidian";
        btn.style.cssText = `
            position: fixed;
            top: 70px;
            right: 20px;
            z-index: 9999;
            padding: 6px 10px;
            font-size: 14px;
            background: #f5f5f5;
            border-radius: 6px;
            border: 1px solid #aaa;
            cursor: pointer;
        `;

        btn.onclick = () => {
            if (isProcessing) {
                log("‚õî –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏.");
                return;
            }
            isProcessing = true;
            log("üñ± –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å");

            clickShare((link) => {
                const title = `ChatGPT Clip ‚Äî ${nowStr()}`;
                makeObsidianNote(title, link);
            });
        };

        target.appendChild(btn);
        log("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const observer = new MutationObserver(insertButton);
    observer.observe(document.body, { childList: true, subtree: true });

    log("üì° –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤");
})();
